const testJson = `{\n\"name\": \"VĩnhKhắc\",\n\"mission\": \"Nâng tầm phong cách cá nhân và sự tin cậy vượt thời gian với những chiếc đồng hồ cao cấp được bảo chứng chất lượng tuyệt đối.\",\n\"values\": \"Chất lượng, Uy tín, Sang trọng, Tận tâm\",\n\"audience\": \"Những cá nhân thành đạt, sành điệu, có gu thẩm mỹ cao, coi trọng chất lượng, độ bền và mong muốn thể hiện đẳng cấp qua phụ kiện thời trang.\",\n\"personality\": \"Tinh tế, Đáng tin cậy, Vượt thời gian, Sang trọng\"}\n}`;\n\n// Simple function to test our fix\nfunction sanitizeAndParseJson(jsonText) {\n    // This function attempts to fix common JSON errors produced by AI models.\n    if (!jsonText) {\n        throw new Error(\"Received empty JSON string from AI.\");\n    }\n\n    let sanitized = jsonText.trim();\n\n    // First, try to parse the JSON as is - if it works, return it immediately\n    try {\n        return JSON.parse(sanitized);\n    } catch (e) {\n        // If it fails, continue with sanitization\n    }\n\n    // Remove any markdown code block markers if present\n    const markdownMatch = sanitized.match(/```(?:json)?\\s*([\\s\\S]*?)\\s*```/);\n    if (markdownMatch && markdownMatch[1]) {\n        sanitized = markdownMatch[1];\n    }\n\n    // The single-line comment removal was removed because it was corrupting\n    // base64 strings in image generation which can contain \"//\".\n    // The AI models should be trusted to return valid JSON when requested.\n\n    // 2. Fix for observed error: `... ,\"=value\" ...` which should be `... ,\"value\" ...`\n    // This regex looks for a comma or opening bracket, optional whitespace,\n    // then the erroneous `=\"` followed by a string, and a closing \"`.\n    // It reconstructs it as a valid JSON string.\n    sanitized = sanitized.replace(/([,\\[])\\s*=\\s*\"([^\"]*)\"/g, '$1\"$2\"');\n\n    // 3. Fix for Pinterest posts generating \"infographicContent\" instead of \"content\".\n    sanitized = sanitized.replace(/\"infographicContent\":/g, '\"content\":');\n    \n    // 4. Fix for hashtags missing an opening quote, e.g., [... , #tag\"] or [#tag\"]\n    // This looks for a comma/bracket followed by whitespace, then a #, then captures the tag content, and the closing quote.\n    // It then reconstructs it with the opening quote.\n    sanitized = sanitized.replace(/([\\[,]\\s*)#([^\"]+)(\")/g, '$1\"#$2$3');\n\n    // 5. Removed risky unescaped quote sanitizer. Relying on responseMimeType: \"application/json\".\n    // sanitized = sanitized.replace(/(?<![[{\\s:,])\"(?![\\s,}\\]:])/g, '\\\"');\n\n    // 6. Remove trailing commas, which are valid in JS but not in strict JSON.\n    // e.g., `{\"key\":\"value\",}` or `[\"item1\",]`\n    sanitized = sanitized.replace(/,(\\s*[}\\]])/g, '$1');\n    \n    try {\n        return JSON.parse(sanitized);\n    } catch (e) {\n        console.error(\"Failed to parse AI JSON response for product-based ideas:\", jsonText);\n        throw new Error(\"The AI returned a malformed or unexpected response. This may be a temporary issue with the model. Please try again later or configure a different model in Settings.\");\n    }\n}\n\ntry {\n    const result = sanitizeAndParseJson(testJson);\n    console.log(\"Successfully parsed JSON:\");\n    console.log(JSON.stringify(result, null, 2));\n} catch (e) {\n    console.error(\"Error parsing JSON:\", e.message);\n}